networks:
  prometheus_network:
    driver: bridge

services:
  postgres:
    image: postgres:14
    container_name: prometheus_postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    volumes:
      - ./data_postgres:/var/lib/postgresql/data
    networks:
      - prometheus_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j
    platform: linux/amd64
    container_name: neo4j_container
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_server_memory_heap_initial__size=4G
      - NEO4J_server_memory_heap_max__size=4G
      - NEO4J_dbms_memory_transaction_total_max=8G
      - NEO4J_db_transaction_timeout=600s
    networks:
      - prometheus_network
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - ./data_neo4j:/data:rw
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "--non-interactive", "RETURN 1;"]
      interval: 30s
      timeout: 60s
      retries: 3

  prometheus:
    build: .
    container_name: prometheus
    ports:
      - "9002:9002"
    environment:
      # Logging
      - PROMETHEUS_LOGGING_LEVEL=${PROMETHEUS_LOGGING_LEVEL}

      # General settings
      - PROMETHEUS_ENVIRONMENT=${PROMETHEUS_ENVIRONMENT}
      - PROMETHEUS_BACKEND_CORS_ORIGINS=${PROMETHEUS_BACKEND_CORS_ORIGINS}

      # Neo4j settings
      - PROMETHEUS_NEO4J_URI=${PROMETHEUS_NEO4J_URI}
      - PROMETHEUS_NEO4J_USERNAME=${PROMETHEUS_NEO4J_USERNAME}
      - PROMETHEUS_NEO4J_PASSWORD=${PROMETHEUS_NEO4J_PASSWORD}
      - PROMETHEUS_NEO4J_BATCH_SIZE=${PROMETHEUS_NEO4J_BATCH_SIZE}

      # Knowledge Graph settings
      - PROMETHEUS_KNOWLEDGE_GRAPH_MAX_AST_DEPTH=${PROMETHEUS_KNOWLEDGE_GRAPH_MAX_AST_DEPTH}
      - PROMETHEUS_KNOWLEDGE_GRAPH_CHUNK_SIZE=${PROMETHEUS_KNOWLEDGE_GRAPH_CHUNK_SIZE}
      - PROMETHEUS_KNOWLEDGE_GRAPH_CHUNK_OVERLAP=${PROMETHEUS_KNOWLEDGE_GRAPH_CHUNK_OVERLAP}
      - PROMETHEUS_MAX_TOKEN_PER_NEO4J_RESULT=${PROMETHEUS_MAX_TOKEN_PER_NEO4J_RESULT}
      - PROMETHEUS_WORKING_DIRECTORY=${PROMETHEUS_WORKING_DIRECTORY}

      # LLM model settings
      - PROMETHEUS_ADVANCED_MODEL=${PROMETHEUS_ADVANCED_MODEL}
      - PROMETHEUS_BASE_MODEL=${PROMETHEUS_BASE_MODEL}

      # API keys for various LLM providers
      - PROMETHEUS_ANTHROPIC_API_KEY=${PROMETHEUS_ANTHROPIC_API_KEY}
      - PROMETHEUS_GEMINI_API_KEY=${PROMETHEUS_GEMINI_API_KEY}
      - PROMETHEUS_OPENAI_FORMAT_API_KEY=${PROMETHEUS_OPENAI_FORMAT_API_KEY}
      - PROMETHEUS_OPENAI_FORMAT_BASE_URL=${PROMETHEUS_OPENAI_FORMAT_BASE_URL}

      # Model settings
      - PROMETHEUS_MAX_INPUT_TOKENS=${PROMETHEUS_MAX_INPUT_TOKENS}
      - PROMETHEUS_MAX_OUTPUT_TOKENS=${PROMETHEUS_MAX_OUTPUT_TOKENS}
      - PROMETHEUS_TEMPERATURE=${PROMETHEUS_TEMPERATURE}

      # Database settings
      - PROMETHEUS_DATABASE_URL=${PROMETHEUS_DATABASE_URL}
    networks:
      - prometheus_network
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    develop:
      watch:
        - path: .
          target: /app
          action: sync+restart
